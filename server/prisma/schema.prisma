generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  Male
  Female
}

enum Util {
  Man
  Woman
  Boy
  Girl
}

enum Status {
  Pending
  Unpaid
  Paid
}

model Profile {
  id          String   @id @default(uuid())
  firstName   String?
  lastName    String?
  phoneNumber String?
  photo       String?
  address     String?
  birthDate   String?
  gender      Gender   @default(Male)
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chat {
  id         String   @id @default(uuid())
  message    String
  senderId   String
  receiverId String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Store {
  id          String   @id @default(uuid())
  name        String
  address     String
  description String
  photo       String
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cart        Cart[]
}

model Cart {
  id         String   @id @default(uuid())
  quantity   Int
  productId  String
  storeId    String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  store      Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  password     String
  role         Role     @default(USER)
  verified     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  profile      Profile?
  order        Order[]
  sender       Chat[]   @relation("sender")
  receiver     Chat[]   @relation("receiver")
  notification Notification[]
  store        Store?
  cart         Cart[]
}

model ProductPhoto {
  id        String   @id @default(uuid())
  photo     String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id        String    @id @default(uuid())
  name      String @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]
}

model Size {
  id        String   @id @default(uuid())
  name      String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Color {
  id        String   @id @default(uuid())
  name      String
  code      String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Utility {
  id        String   @id @default(uuid())
  name      Util
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Product {
  id            String         @id @default(uuid())
  name          String
  description   String
  price         Int
  stock         Int
  categoryId    String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  productPhotos ProductPhoto[]
  size          Size[]
  color         Color[]
  utility       Utility[]
  orderDetail   OrderDetail[]
  cart          Cart[]
}

model Shipper {
  id          String        @id @default(uuid())
  service     String
  fee         Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  orderDetail OrderDetail[]
}

model OrderDetail {
  id         String   @id @default(uuid())
  quantity   Int
  totalPrice Int
  productId  String
  shipperId  String
  orderId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  shipper    Shipper  @relation(fields: [shipperId], references: [id], onDelete: Cascade)
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Order {
  id           String        @id @default(uuid())
  orderDate    DateTime      @default(now())
  totalPayment Int
  status       Status        @default(Pending)
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderDetail  OrderDetail[]
}

model Notification {
  id           String        @id @default(uuid())
  title        String
  message      String
  userId String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}